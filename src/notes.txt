to install react query- yarn add react-query
QueryClient, QueryClientProvider

import { useQuery } from "react-query";
const { data, isLoading, isError, error } = useQuery(
    "super-heroes", //this is a query key
    fetchSuperHeroes
  );

  if (isLoading) {
    return <h2>Loading...</h2>;
  }
  if (isError) {
    return <h2>{error.message}</h2>;
  }

import { ReactQueryDevtools } from "react-query/devtools";
<ReactQueryDevtools initialIsOpen={false} position="bottom-right" />

const { data, isLoading, isError, error, isFetching } = useQuery(
    "super-heroes",
    fetchSuperHeroes,
    { cacheTime: 5000 } //default cache time is 5 mins
  );
  isFetching - react query caches the data for 5 minutes, in the background 
  react query fetches the data, after the cache time expires - to check
  use isFetching (first cached data then fetched data)
  (there needs to be user activity on page like clicks)
  
Stale time - for redundant data, helps to avoid fetching in the background
const { data, isLoading, isError, error, isFetching } = useQuery(
    "super-heroes",
    fetchSuperHeroes,
    {staleTime: 30000}
  );

Refetch data:
  const RqSuperHeroes = () => {
  const { data, isLoading, isError, error, isFetching } = useQuery(
    "super-heroes",
    fetchSuperHeroes,
    {
      refetchOnMount: true, //if false, no fetching after initial fetch
      refetchOnWindowFocus: true, //will update whenever the window comes in focus
    }
  );
}

polling - continuous fetching

  const { data, isLoading, isError, error, isFetching } = useQuery(
    "super-heroes",
    fetchSuperHeroes,
    {
      refetchInterval: 8000,
      refetchIntervalInBackground: true,
    }
  );

useQuery onClick - fetching data wont happen when page loads, instead only when user 
  clicks a button
    const { data, isLoading, isError, error, isFetching, refetch } = useQuery(
    "super-heroes",
    fetchSuperHeroes,
    {
      enabled: false, //to disable default fetching
    }
  );

    <button type="button" onClick={refetch}>
        Fetch Heroes
      </button>

Success and error callbacks - to perform side effects like toast when api call is complete
const onSuccess = (data) => {
    console.log("Perform side effect after fetching", data);
  };

  const onError = (error) => {
    console.log("Perform side effect after encountering an error", error);
  };

  const { data, isLoading, isError, error, isFetching, refetch } = useQuery(
    "super-heroes",
    fetchSuperHeroes,
    {
      onSuccess: onSuccess,
      onError: onError,
    }
  );

Data transformation - to transform data that front end components can consume. Data transformation
includes data filtering.

    const { data, isLoading, isError, error, isFetching, refetch } = useQuery(
    "super-heroes",
    fetchSuperHeroes,
    {
      onSuccess: onSuccess,
      onError: onError,
      select: (data) => {
        const superHeroNames = data.data.map((hero) => {
          return ({name: hero.name, id: hero.id});
        });
        return superHeroNames;
      },
    }
  );
  {data.map((hero) => {
        return (
          <div key={hero.id}>
            <p>
              {hero.name} <span>{hero.id}</span>
            </p>
          </div>
        );
      })}

Query by Id


